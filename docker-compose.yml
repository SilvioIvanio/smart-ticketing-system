version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - ticketing-network
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 5s
      retries: 3

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
    networks:
      - ticketing-network
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      timeout: 10s
      retries: 5

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: ticketing_db
    volumes:
      - mongodb-data:/data/db
    networks:
      - ticketing-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Passenger Service
  passenger-service:
    build:
      context: ./services/passenger-service/passenger_service
      dockerfile: Dockerfile
    container_name: passenger-service
    ports:
      - "9090:9090"
    depends_on:
      mongodb:
        condition: service_healthy
    environment:
      MONGO_HOST: mongodb://mongodb:27017
      DB_NAME: ticketing_db
    networks:
      - ticketing-network
    restart: on-failure

  # Ticketing Service
  ticketing-service:
    build:
      context: ./services/ticketing-service/ticketing_service
      dockerfile: Dockerfile
    container_name: ticketing-service
    ports:
      - "9091:9091"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      MONGO_HOST: mongodb://mongodb:27017
      DB_NAME: ticketing_db
    networks:
      - ticketing-network
    restart: on-failure

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service/payment_service
      dockerfile: Dockerfile
    container_name: payment-service
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      MONGO_HOST: mongodb://mongodb:27017
      DB_NAME: ticketing_db
    networks:
      - ticketing-network
    restart: on-failure

  # Transport Service
  transport-service:
    build:
      context: ./services/transport-service/transport_service
      dockerfile: Dockerfile
    container_name: transport-service
    ports:
      - "9092:9092"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      MONGO_HOST: mongodb://mongodb:27017
      DB_NAME: ticketing_db
    networks:
      - ticketing-network
    restart: on-failure

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service/notification_service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
    networks:
      - ticketing-network
    restart: on-failure

  # Admin Service
  admin-service:
    build:
      context: ./services/admin-service/admin_service
      dockerfile: Dockerfile
    container_name: admin-service
    ports:
      - "9093:9093"
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP: kafka:9092
      MONGO_HOST: mongodb://mongodb:27017
      DB_NAME: ticketing_db
    networks:
      - ticketing-network
    restart: on-failure

networks:
  ticketing-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
